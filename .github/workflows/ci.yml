name: Continuous Integration

on:
  push:
    branches:
      - '**'
    tags-ignore:
      - 'production'

jobs:
  app:
    name: Continuous Integration (app)
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_DB: postgres
          POSTGRES_USERNAME: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.4.5
          bundler-cache: true

      - name: Enable corepack
        run: corepack enable

      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'yarn'

      - name: Prepare database
        env:
          RAILS_ENV: test
          PG_HOST: localhost
        run: |
          bundle exec rails db:prepare --trace
          bundle exec rails database:seed:production --trace
          bundle exec rails assets:precompile

      - name: Test
        env:
          RAILS_ENV: test
          PG_HOST: localhost
        run: bundle exec rspec --format documentation

      - name: Lint
        run: bundle exec rubocop --parallel --display-cop-names

      - name: Security vulnerability scan
        run: |
          bundle exec brakeman --no-pager
          bundle exec importmap audit

  build:
    name: Build application
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs:
      - app

    steps:
      - name: Set version
        run: |
          echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: image=moby/buildkit:master

      - name: Login to Github Packages
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USER }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and push app to GitHub Packages
        uses: docker/build-push-action@v6.18.0
        with:
          file: Dockerfile.prod
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:${{ env.VERSION }}

  release:
    name: Create release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Set version
        run: |
          echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV

      - name: Create Github Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.event.repository.name }} ${{ env.VERSION }}
          prerelease: contains(github.ref, '-')
          body: |
            Application ${{ github.event.repository.name }} ${{ env.VERSION }} was released
